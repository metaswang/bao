server:
  port: ${PORT:8000}
  cors:
    enabled: True
    allow_origins: ["*"]
    allow_methods: ["*"]
    allow_headers: ["*"]
  auth:
    enabled: true
    # python -c 'import base64; print("Basic " + base64.b64encode("secret:key".encode()).decode())'
    # 'secret' is the username and 'key' is the password for basic auth by default
    # If the auth is enabled, this value must be set in the "Authorization" header of the request.
    secret: ${APP_SECRET}

crawler:
  source_type: youtube
  output_dir: data/crawl
  whisper_model: small
  transcript_merge_size: 300
  youtube_short_url_domain: "https://youtu.be"  
  youtube_url_domain: "https://www.youtube.com"
  youtube_short_url_domain: "https://youtu.be"

injest:
  chunk_size: 500
  chunk_overlap: 50
  injest_from: data/youtube_lessons
  injest_from: data/youtube_lessons
  default_topic: bao

llm:
  mode: openai
  max_new_tokens: 512
  context_window: 3900

embedding:
  mode: local
  embedding_size: 768

vectorstore:
  database: qdrant

qdrant:
  path: data/qdrant_store_test
  force_disable_check_same_thread: true

local:
  embedding_hf_model_name: intfloat/multilingual-e5-base

anthropic:
  api_key: ${ANTHROPIC_API_KEY}
  eco_model: claude-3-sonnet-20240229
  supper_model: claude-3-opus-20240229

openai:
  api_key: ${OPENAI_API_KEY}
  eco_model: gpt-3.5-turbo-0125
  super_model: gpt-4-0125-preview

google_api:
  api_key: ${GOOGLE_API_KEY}
  model: gemini-pro

reranker:
  enabled: true
  cohere:
    api_key: ${COHERE_API_KEY}  
    k: 8
    model: rerank-multilingual-v2.0
    
web_ingest:
  enabled: true
  path: "/ingest"

web_chat:
  enabled: true
  title: "Your Youtube Asistant"
  header_color: "#6264f5"
  path: "/chatbot"
  path: "/baobot"
  btn_undo: "↩️ Delete Previous"
  btn_clear: "🗑️  Clear"
  btn_submit: "Submit"
  work_mode_label: "Mode"
  work_modes: 
    - "Ask Question"
    - "Search"
  max_history_message_len: 50
  max_history_len: 3
  frequently_asked_questions:
   - "Question 1"
   - "Question 2"
   - "Question 3"
  btn_undo: "Delete Previous"
  btn_clear: "Clear"
  btn_submit: "Submit"
  work_mode_label: ""
  work_modes: "Mode"
   - "Ask Question"
   - "Search"

discord:
  enabled: true
  reply_mode: true
  discord_token: ${DISCORD_TOKEN}
  bot_id: ${DISCORD_BOT_ID}
  chat_history_ttl: 3600
  max_history_len: 5
  max_history_message_len: 100
  reply_mode: true
  fallback_message: >
   (⊙＿⊙')  Sorry, I couldn't find relevant information to answer your question. If you have any other questions, please feel free to ask.  
   ✌(-‿-)✌  ✌(-‿-)✌  ✌(-‿-)✌  ✌(-‿-)✌   
   Do you want to search? Add prefix /s to your question.
   Any questions? 😯  
  frequently_asked_questions:
   - "Question 1?"
   - "Question 2?"
   - "Question 3?"

retriever:
  k: 10
  collection_name: bao
  score_threshold: 0.85
  metadata:
    video: str
    pub_date: str
    source: str
    title: str
    start_at: int
    pub_year: str
    pub_year_month: str
    topic: str
    chunk_no: int


chain_templates:
  intent_classify_model: gpt-3.5
  # remember to customise below according to the topics existed in your real senarios
  intent_classify_template: >
    Do not answer the question. Instead, you need to follow below steps to generate a JSON object with following fields to classify the question: type: “greeting”, "MY Category", Others" (string) confidence: 0.0 to 1.0 (float)
    Steps:
    1.Intention classification rules, blabla
    2.Classify it as "greeting" when meet below criterion:
      abc
    4.Classify it as "My Class" when meet below criterion:
      cde
    5.When uncertain or cannot be classified into the above categories, classify as "Others", like：
      def
      efg
  answer_model: anthropic-sonnet
  answer_template: >
    ou are an expert in the field of reading analysis and writing. Please answer the question using only the content in the following code block, and be accurate. If you don’t know the answer, please do not reply. \nContext:```{context}```
  greeting_model: gemini
  greeting_template: >
    You are the document chatbot Bob. Please answer the user’s questions based on the content in the triple backticks. At the end of the answer, if necessary, you can introduce yourself in detail based on the information in the following triple backticks, and tell the user how to ask questions. Your answer can be in markdown format, and the answer should be comprehensive and clear. If you are not sure, please do not answer.
    ```My name is Bob 
    blablabla
    ```
    Input: {question}
    Output:

  query_rewrite_model: anthropic-sonnet
  query_rewrite_template: >
    DO NOT answer the question. Instead, you need to follow below steps one by one to generate a valid JSON object with following fields:
    1. If there exists a explicit date to describe直播,视频, please store it in "pub-date" in the format yyyyMMdd. Otherwise, do not extract it.
    2. If there exists a explicit year numbers to describe videos or broadcasts, put it into "pub-year" as yyyy format. Otherwise, do not extract it.
    3. If there exists a explicit year and month to describe videos or broadcasts，put it into "pub-year-month" as yyyyMMdd format. Otherwise, do not extract it.
    Note，each character in the value of "pub-date", "pub-year", "pub-year-month" should be in '0'-'9'
    4. If there is a broadcast or video playback link, please extract it and store it in "video". Otherwise, do not extract it.
    5. Construct an independent question that can be understood without the chat history. Do not answer the question, just reconstruct it and put it in "query". You need to remove any date,year, month and links from "query"
    6. Ensemble the above fields into a valid json object then return it.